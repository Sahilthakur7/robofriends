{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","connect","state","searchField","searchRobotsReducer","isPending","fetchRobotsReducer","error","dispatch","onSearchChange","event","payload","target","value","onRequestRobots","fetch","then","response","json","data","catch","useEffect","filteredRobots","filter","robot","toLowerCase","includes","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","INITIAL_STATE","INITIAL_STATE_ROBOTS","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.23a431fe.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { useEffect } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nimport { connect } from 'react-redux';\n\nimport { requestRobots, setSearchField } from '../actions';\n\nconst App = ({searchField, onSearchChange, isPending, error, robots, onRequestRobots}) => {\n\n  useEffect(() => {\n    onRequestRobots()\n  }, []);\n\n  const filteredRobots = robots.filter((robot) => {\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\n  });\n  return isPending ? (\n    <h1>Loading</h1>\n  ) : (\n    <div className=\"tc\">\n      <h1 className=\"f1\">RoboFriends</h1>\n      <SearchBox searchChange={onSearchChange} />\n      <Scroll>\n        <CardList robots={filteredRobots} />\n      </Scroll>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobotsReducer.searchField,\n    isPending: state.fetchRobotsReducer.isPending,\n    error: state.fetchRobotsReducer.error,\n    robots: state.fetchRobotsReducer.robots\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n  onRequestRobots: () => dispatch(requestRobots())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)( App );\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n} from './constants';\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  });\n\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then((response) => response.json())\n  .then((data) => {\n    dispatch({\n      type: REQUEST_ROBOTS_SUCCESS,\n      payload: data\n    })\n  }).catch(error => {\n    dispatch({\n      type: REQUEST_ROBOTS_FAILED,\n      payload: error\n    })\n  })\n\n};","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n} from './constants';\n\nconst INITIAL_STATE = {\n  searchField: \"\"\n}\n\nexport const searchRobotsReducer = (state = INITIAL_STATE, action) => {\n  switch(action.type){\n    case CHANGE_SEARCH_FIELD: {\n      return {...state, searchField: action.payload}\n    }\n    default:\n      return state\n  }\n}\n\nconst INITIAL_STATE_ROBOTS = {\n  isPending: \"\",\n  error: false,\n  robots: []\n}\n\nexport const fetchRobotsReducer = (state = INITIAL_STATE_ROBOTS, action) => {\n  switch(action.type){\n    case REQUEST_ROBOTS_PENDING: {\n      return {...state, isPending: true}\n    }\n    case REQUEST_ROBOTS_SUCCESS: {\n      return {...state, robots: action.payload, isPending: false}\n    }\n    case REQUEST_ROBOTS_FAILED: {\n      return {...state, isPending: false, error: action.payload}\n    }\n\n  default:\n    return state\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport { searchRobotsReducer, fetchRobotsReducer } from './reducers';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobotsReducer, fetchRobotsReducer})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}